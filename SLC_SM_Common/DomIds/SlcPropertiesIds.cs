//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcProperties
{
    using System;
    using System.ComponentModel;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcPropertiesIds
    {
        public const string ModuleId = "(slc)properties";
        public static class Enums
        {
            public static class Propertytype
            {
                public const string String = "string";
                public const string Discrete = "discrete";
                public const string Boolean = "Boolean";
                public static string ToValue(PropertytypeEnum @enum)
                {
                    switch (@enum)
                    {
                        case PropertytypeEnum.String:
                            return String;
                        case PropertytypeEnum.Discrete:
                            return Discrete;
                        case PropertytypeEnum.Boolean:
                            return Boolean;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
                    }
                }

                public static PropertytypeEnum ToEnum(string s)
                {
                    switch (s)
                    {
                        case String:
                            return PropertytypeEnum.String;
                        case Discrete:
                            return PropertytypeEnum.Discrete;
                        case Boolean:
                            return PropertytypeEnum.Boolean;
                        default:
                            throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
                    }
                }
            }

            public enum PropertytypeEnum
            {
                String,
                Discrete,
                Boolean
            }
        }

        public static class Sections
        {
            public static class Discrete
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("8354c390-f0d9-478d-a8bf-c4677d646a2d"))
                {ModuleId = "(slc)properties"};
                public static FieldDescriptorID Option { get; } = new FieldDescriptorID(new Guid("14e1d9ba-a103-4353-a96b-3bd73ccd99db"));
            }

            public static class PropertyInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("2997b2a1-d651-4f93-b0db-4de54fb36d35"))
                {ModuleId = "(slc)properties"};
                public static FieldDescriptorID Name { get; } = new FieldDescriptorID(new Guid("6d4eb3ce-2716-440a-90bf-33751cd8cf8a"));
                public static FieldDescriptorID PropertyType { get; } = new FieldDescriptorID(new Guid("c0495603-6716-4153-96dc-4c1da932c2d9"));
                public static FieldDescriptorID Scope { get; } = new FieldDescriptorID(new Guid("97024652-924c-4b16-84ad-2d68632a34f6"));
                public static FieldDescriptorID Default { get; } = new FieldDescriptorID(new Guid("1294ecdc-67f2-45cf-b0e9-fc9f681abe84"));
                public static FieldDescriptorID StringSizeLimit { get; } = new FieldDescriptorID(new Guid("d3472f3f-9ed0-4fcc-b024-03ea29687a84"));
                public static FieldDescriptorID IsMultiLineString { get; } = new FieldDescriptorID(new Guid("de5c318e-a272-4071-9cc7-f34657b255cb"));
            }

            public static class PropertyValue
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("abcd2029-3e87-4182-bf8e-23b824ea6fba"))
                {ModuleId = "(slc)properties"};
                public static FieldDescriptorID PropertyName { get; } = new FieldDescriptorID(new Guid("3dbf1f1f-3e88-4322-ae83-8df1150931cb"));
                public static FieldDescriptorID Value { get; } = new FieldDescriptorID(new Guid("db3990e6-b899-4409-9a58-a5ee52b22f2f"));
                public static FieldDescriptorID PropertyID { get; } = new FieldDescriptorID(new Guid("9289f5b2-16e6-45d4-a472-790da3ae71bf"));
            }

            public static class PropertyValueInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("4654bab7-bffb-4b9a-abb1-9b7048baa187"))
                {ModuleId = "(slc)properties"};
                public static FieldDescriptorID LinkedObjectID { get; } = new FieldDescriptorID(new Guid("2be39464-6815-4a8c-bf84-0b766fc23335"));
                public static FieldDescriptorID Scope { get; } = new FieldDescriptorID(new Guid("3be83ad3-399a-44a0-8e46-7d99dfc2489a"));
                public static FieldDescriptorID SubID { get; } = new FieldDescriptorID(new Guid("4fb594bd-59ce-43bd-b83e-8c6acc677508"));
            }

            public static class Layout
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("dd8a31be-7bf8-402f-85b9-3eeb5d0eec5e"))
                {ModuleId = "(slc)properties"};
                public static FieldDescriptorID SectionName { get; } = new FieldDescriptorID(new Guid("fdd7a057-7d8d-491a-b5bf-c0b91f0ad40c"));
                public static FieldDescriptorID Order { get; } = new FieldDescriptorID(new Guid("23da7fac-1c27-4663-b72c-4348b201de21"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId Property { get; } = new DomDefinitionId(new Guid("e6d22478-3415-4795-9b00-6f2a85a610e3"))
            {ModuleId = "(slc)properties"};
            public static DomDefinitionId PropertyValues { get; } = new DomDefinitionId(new Guid("f2c92f3c-1a57-4f2d-a403-dd8968d15202"))
            {ModuleId = "(slc)properties"};
        }

        public static class Behaviors
        {
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcProperties
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a PropertyInstance DOM instance.
    /// The <see cref="PropertyInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PropertyInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInstance"/> class. Creates an empty <see cref="PropertyInstance"/> instance with default settings.
        /// </summary>
        public PropertyInstance() : base(SlcPropertiesIds.Definitions.Property)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInstance"/> class. Creates an empty <see cref="PropertyInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public PropertyInstance(Guid id) : base(SlcPropertiesIds.Definitions.Property, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="PropertyInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PropertyInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPropertiesIds.Definitions.Property))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPropertiesIds.Definitions.Property)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the Discrete section of the DOM Instance.
        /// </summary>
        public IList<DiscreteSection> Discretes { get; private set; }

        /// <summary>
        /// Gets or sets the PropertyInfo section of the DOM Instance.
        /// </summary>
        public PropertyInfoSection PropertyInfo { get; set; }

        /// <summary>
        /// Gets or sets the Layout section of the DOM Instance.
        /// </summary>
        public LayoutSection Layout { get; set; }

        public static explicit operator PropertyInstance(DomInstance instance)
        {
            return new PropertyInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="PropertyInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="PropertyInstance"/> object that is a deep copy of this instance.</returns>
        public PropertyInstance Clone()
        {
            return new PropertyInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="PropertyInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="PropertyInstance"/> object that is a copy of this instance but with a different id.</returns>
        public PropertyInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new PropertyInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            foreach (var item in Discretes)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(PropertyInfo.ToSection());
            if (Layout != null && !Layout.IsEmpty)
            {
                domInstance.Sections.Add(Layout.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            Discretes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcPropertiesIds.Sections.Discrete.Id)).Select(section => new DiscreteSection(section)).ToList();
            var _propertyInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPropertiesIds.Sections.PropertyInfo.Id));
            if (_propertyInfo is null)
            {
                PropertyInfo = new PropertyInfoSection();
            }
            else
            {
                PropertyInfo = new PropertyInfoSection(_propertyInfo);
            }

            var _layout = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPropertiesIds.Sections.Layout.Id));
            if (_layout is null)
            {
                Layout = new LayoutSection();
            }
            else
            {
                Layout = new LayoutSection(_layout);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PropertyValuesInstance DOM instance.
    /// The <see cref="PropertyValuesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PropertyValuesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValuesInstance"/> class. Creates an empty <see cref="PropertyValuesInstance"/> instance with default settings.
        /// </summary>
        public PropertyValuesInstance() : base(SlcPropertiesIds.Definitions.PropertyValues)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValuesInstance"/> class. Creates an empty <see cref="PropertyValuesInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public PropertyValuesInstance(Guid id) : base(SlcPropertiesIds.Definitions.PropertyValues, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValuesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="PropertyValuesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PropertyValuesInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcPropertiesIds.Definitions.PropertyValues))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcPropertiesIds.Definitions.PropertyValues)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the PropertyValue section of the DOM Instance.
        /// </summary>
        public IList<PropertyValueSection> PropertyValues { get; private set; }

        /// <summary>
        /// Gets or sets the PropertyValueInfo section of the DOM Instance.
        /// </summary>
        public PropertyValueInfoSection PropertyValueInfo { get; set; }

        public static explicit operator PropertyValuesInstance(DomInstance instance)
        {
            return new PropertyValuesInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="PropertyValuesInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="PropertyValuesInstance"/> object that is a deep copy of this instance.</returns>
        public PropertyValuesInstance Clone()
        {
            return new PropertyValuesInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="PropertyValuesInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="PropertyValuesInstance"/> object that is a copy of this instance but with a different id.</returns>
        public PropertyValuesInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new PropertyValuesInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            foreach (var item in PropertyValues)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(PropertyValueInfo.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            PropertyValues = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcPropertiesIds.Sections.PropertyValue.Id)).Select(section => new PropertyValueSection(section)).ToList();
            var _propertyValueInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcPropertiesIds.Sections.PropertyValueInfo.Id));
            if (_propertyValueInfo is null)
            {
                PropertyValueInfo = new PropertyValueInfoSection();
            }
            else
            {
                PropertyValueInfo = new PropertyValueInfoSection(_propertyValueInfo);
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcProperties
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a DiscreteSection section.
    /// The <see cref="DiscreteSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class DiscreteSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteSection"/> class. Creates an empty <see cref="DiscreteSection"/> object with default settings.
        /// </summary>
        public DiscreteSection() : base(SlcPropertiesIds.Sections.Discrete.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="DiscreteSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public DiscreteSection(Section section) : base(section, SlcPropertiesIds.Sections.Discrete.Id)
        {
        }

        /// <summary>
        /// Gets or sets the Option field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Option
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.Discrete.Option);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.Discrete.Option);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.Discrete.Option, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="DiscreteSection"/>.
        /// </summary>
        /// <returns>A new <see cref="DiscreteSection"/> object that is a deep copy of this section.</returns>
        public DiscreteSection Clone()
        {
            return new DiscreteSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="DiscreteSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="DiscreteSection"/> object that is a copy of this section but with a different id.</returns>
        public DiscreteSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new DiscreteSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcPropertiesIds.Sections.Discrete.Option) == null)
                throw new InvalidOperationException("'Option' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PropertyInfoSection section.
    /// The <see cref="PropertyInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PropertyInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInfoSection"/> class. Creates an empty <see cref="PropertyInfoSection"/> object with default settings.
        /// </summary>
        public PropertyInfoSection() : base(SlcPropertiesIds.Sections.PropertyInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="PropertyInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PropertyInfoSection(Section section) : base(section, SlcPropertiesIds.Sections.PropertyInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the Name field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Name
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.Name);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.Name);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.Name, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PropertyType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcPropertiesIds.Enums.PropertytypeEnum? PropertyType
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.PropertyType);
                if (wrapper != null)
                {
                    return (SlcPropertiesIds.Enums.PropertytypeEnum? )SlcPropertiesIds.Enums.Propertytype.ToEnum(wrapper.Value);
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.PropertyType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.PropertyType, SlcPropertiesIds.Enums.Propertytype.ToValue((SlcPropertiesIds.Enums.PropertytypeEnum)value));
                }
            }
        }

        /// <summary>
        /// Gets or sets the Scope field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Scope
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.Scope);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.Scope);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.Scope, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Default field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Default
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.Default);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.Default);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.Default, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StringSizeLimit field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? StringSizeLimit
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcPropertiesIds.Sections.PropertyInfo.StringSizeLimit);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.StringSizeLimit);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.StringSizeLimit, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the IsMultiLineString field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Boolean? IsMultiLineString
        {
            get
            {
                var wrapper = section.GetValue<Boolean>(SlcPropertiesIds.Sections.PropertyInfo.IsMultiLineString);
                if (wrapper != null)
                {
                    return (Boolean? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyInfo.IsMultiLineString);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyInfo.IsMultiLineString, (Boolean)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="PropertyInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="PropertyInfoSection"/> object that is a deep copy of this section.</returns>
        public PropertyInfoSection Clone()
        {
            return new PropertyInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="PropertyInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="PropertyInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public PropertyInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new PropertyInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.Name) == null)
                throw new InvalidOperationException("'Name' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcPropertiesIds.Sections.PropertyInfo.PropertyType) == null)
                throw new InvalidOperationException("'PropertyType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PropertyValueSection section.
    /// The <see cref="PropertyValueSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PropertyValueSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueSection"/> class. Creates an empty <see cref="PropertyValueSection"/> object with default settings.
        /// </summary>
        public PropertyValueSection() : base(SlcPropertiesIds.Sections.PropertyValue.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="PropertyValueSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PropertyValueSection(Section section) : base(section, SlcPropertiesIds.Sections.PropertyValue.Id)
        {
        }

        /// <summary>
        /// Gets or sets the PropertyName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String PropertyName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValue.PropertyName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValue.PropertyName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValue.PropertyName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Value field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Value
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValue.Value);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValue.Value);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValue.Value, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the PropertyID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? PropertyID
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcPropertiesIds.Sections.PropertyValue.PropertyID);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValue.PropertyID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValue.PropertyID, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="PropertyValueSection"/>.
        /// </summary>
        /// <returns>A new <see cref="PropertyValueSection"/> object that is a deep copy of this section.</returns>
        public PropertyValueSection Clone()
        {
            return new PropertyValueSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="PropertyValueSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="PropertyValueSection"/> object that is a copy of this section but with a different id.</returns>
        public PropertyValueSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new PropertyValueSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValue.PropertyName) == null)
                throw new InvalidOperationException("'PropertyName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a PropertyValueInfoSection section.
    /// The <see cref="PropertyValueInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class PropertyValueInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueInfoSection"/> class. Creates an empty <see cref="PropertyValueInfoSection"/> object with default settings.
        /// </summary>
        public PropertyValueInfoSection() : base(SlcPropertiesIds.Sections.PropertyValueInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropertyValueInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="PropertyValueInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public PropertyValueInfoSection(Section section) : base(section, SlcPropertiesIds.Sections.PropertyValueInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the LinkedObjectID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String LinkedObjectID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValueInfo.LinkedObjectID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValueInfo.LinkedObjectID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValueInfo.LinkedObjectID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Scope field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Scope
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValueInfo.Scope);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValueInfo.Scope);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValueInfo.Scope, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the SubID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String SubID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValueInfo.SubID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.PropertyValueInfo.SubID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.PropertyValueInfo.SubID, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="PropertyValueInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="PropertyValueInfoSection"/> object that is a deep copy of this section.</returns>
        public PropertyValueInfoSection Clone()
        {
            return new PropertyValueInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="PropertyValueInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="PropertyValueInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public PropertyValueInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new PropertyValueInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcPropertiesIds.Sections.PropertyValueInfo.LinkedObjectID) == null)
                throw new InvalidOperationException("'LinkedObjectID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a LayoutSection section.
    /// The <see cref="LayoutSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class LayoutSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutSection"/> class. Creates an empty <see cref="LayoutSection"/> object with default settings.
        /// </summary>
        public LayoutSection() : base(SlcPropertiesIds.Sections.Layout.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LayoutSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="LayoutSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public LayoutSection(Section section) : base(section, SlcPropertiesIds.Sections.Layout.Id)
        {
        }

        /// <summary>
        /// Gets or sets the SectionName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String SectionName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcPropertiesIds.Sections.Layout.SectionName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.Layout.SectionName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.Layout.SectionName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Order field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? Order
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcPropertiesIds.Sections.Layout.Order);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcPropertiesIds.Sections.Layout.Order);
                }
                else
                {
                    section.AddOrUpdateValue(SlcPropertiesIds.Sections.Layout.Order, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="LayoutSection"/>.
        /// </summary>
        /// <returns>A new <see cref="LayoutSection"/> object that is a deep copy of this section.</returns>
        public LayoutSection Clone()
        {
            return new LayoutSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="LayoutSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="LayoutSection"/> object that is a copy of this section but with a different id.</returns>
        public LayoutSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new LayoutSection(section);
        }
    }
}
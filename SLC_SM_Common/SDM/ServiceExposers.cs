//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcServicemanagement
{
	using System;
	using System.Collections;
	using System.Linq;

	using Skyline.DataMiner.Net.Messages.SLDataGateway;
	using Skyline.DataMiner.ProjectApi.ServiceManagement.API.ServiceManagement;
	using static Skyline.DataMiner.ProjectApi.ServiceManagement.API.ServiceManagement.Models;

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceSpecification"/> instances.
	/// </summary>
	public static class ServiceSpecificationExposers
	{
		public static readonly Exposer<Models.ServiceSpecification, Guid> Guid = new Exposer<Models.ServiceSpecification, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceSpecificationExposers), nameof(Guid)));
		public static readonly Exposer<Models.ServiceSpecification, string> Name = new Exposer<Models.ServiceSpecification, string>((obj) => obj.Name, String.Join(".", nameof(ServiceSpecificationExposers), nameof(Name)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceSpecificationConfigurationValue"/> instances.
	/// </summary>
	public static class ServiceSpecificationConfigurationValueExposers
	{
		public static readonly Exposer<Models.ServiceSpecificationConfigurationValue, Guid> Guid = new Exposer<Models.ServiceSpecificationConfigurationValue, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceSpecificationConfigurationValueExposers), nameof(Guid)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceOrder"/> instances.
	/// </summary>
	public static class ServiceOrderExposers
	{
		public static readonly Exposer<Models.ServiceOrder, Guid> Guid = new Exposer<Models.ServiceOrder, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceOrderExposers), nameof(Guid)));
		public static readonly Exposer<Models.ServiceOrder, string> Name = new Exposer<Models.ServiceOrder, string>((obj) => obj.Name, String.Join(".", nameof(ServiceOrderExposers), nameof(Name)));
		public static readonly Exposer<Models.ServiceOrder, string> ExternalId = new Exposer<Models.ServiceOrder, string>((obj) => obj.ExternalID, String.Join(".", nameof(ServiceOrderExposers), nameof(ExternalId)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceOrderItem"/> instances.
	/// </summary>
	public static class ServiceOrderItemExposers
	{
		public static readonly Exposer<Models.ServiceOrderItem, Guid> Guid = new Exposer<Models.ServiceOrderItem, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceOrderItemExposers), nameof(Guid)));
		public static readonly Exposer<Models.ServiceOrderItem, string> Name = new Exposer<Models.ServiceOrderItem, string>((obj) => obj.Name, String.Join(".", nameof(ServiceOrderItemExposers), nameof(Name)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceConfigurationValue"/> instances.
	/// </summary>
	public static class ServiceConfigurationValueExposers
	{
		public static readonly Exposer<Models.ServiceConfigurationValue, Guid> Guid = new Exposer<Models.ServiceConfigurationValue, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceConfigurationValueExposers), nameof(Guid)));
		public static readonly Exposer<Models.ServiceConfigurationValue, Guid> ConfigurationParameterID = new Exposer<Models.ServiceConfigurationValue, Guid>((obj) => obj.ConfigurationParameter?.ID ?? System.Guid.Empty, String.Join(".", nameof(ServiceConfigurationValueExposers), nameof(ConfigurationParameterID)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceOrderItemConfigurationValue"/> instances.
	/// </summary>
	public static class ServiceOrderItemConfigurationValueExposers
	{
		public static readonly Exposer<Models.ServiceOrderItemConfigurationValue, Guid> Guid = new Exposer<Models.ServiceOrderItemConfigurationValue, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceOrderItemConfigurationValueExposers), nameof(Guid)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.ServiceCategory"/> instances.
	/// </summary>
	public static class ServiceCategroyExposers
	{
		public static readonly Exposer<Models.ServiceCategory, Guid> Guid = new Exposer<Models.ServiceCategory, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceCategroyExposers), nameof(Guid)));
	}

	/// <summary>
	/// Exposer-metods for the <see cref="Models.Service"/> instances.
	/// </summary>
	public static class ServiceExposers
	{
		public static readonly Exposer<Models.Service, Guid> Guid = new Exposer<Models.Service, Guid>((obj) => obj.ID, String.Join(".", nameof(ServiceExposers), nameof(Guid)));
		public static readonly Exposer<Models.Service, string> ServiceName = new Exposer<Models.Service, string>((obj) => obj.Name, String.Join(".", nameof(ServiceExposers), nameof(ServiceName)));
		public static readonly Exposer<Models.Service, string> Description = new Exposer<Models.Service, string>((obj) => obj.Description, String.Join(".", nameof(ServiceExposers), nameof(Description)));
		public static readonly Exposer<Models.Service, DateTime?> ServiceStartTime = new Exposer<Models.Service, DateTime?>((obj) => obj.StartTime, String.Join(".", nameof(ServiceExposers), nameof(ServiceStartTime)));
		public static readonly Exposer<Models.Service, DateTime?> ServiceEndTime = new Exposer<Models.Service, DateTime?>((obj) => obj.EndTime, String.Join(".", nameof(ServiceExposers), nameof(ServiceEndTime)));
		public static readonly Exposer<Models.Service, string> Icon = new Exposer<Models.Service, string>((obj) => obj.Icon, String.Join(".", nameof(ServiceExposers), nameof(Icon)));
		public static readonly Exposer<Models.Service, Guid> ServiceSpecifcation = new Exposer<Models.Service, Guid>((obj) => obj.ServiceSpecificationId ?? System.Guid.Empty, String.Join(".", nameof(ServiceExposers), nameof(ServiceSpecifcation)));
		//public static readonly Exposer<Models.Service, SdmObjectReference<DomHelpers.SlcServicemanagement.ServicePropertiesInstance>?> ServiceProperties = new Exposer<ServicesInstance, SdmObjectReference<DomHelpers.SlcServicemanagement.ServicePropertiesInstance>?>((obj) => obj.ServiceInfo.ServiceProperties, String.Join(".", nameof(ServiceExposers), nameof(ServiceProperties)));
		public static readonly Exposer<Models.Service, Guid> RelatedOrganization = new Exposer<Models.Service, Guid>((obj) => obj.OrganizationId ?? System.Guid.Empty, String.Join(".", nameof(ServiceExposers), nameof(RelatedOrganization)));
		public static readonly Exposer<Models.Service, Models.ServiceCategory> ServiceCategory = new Exposer<Models.Service, Models.ServiceCategory>((obj) => obj.Category, String.Join(".", nameof(ServiceExposers), nameof(ServiceCategory)));
		public static readonly DynamicListExposer<Models.Service, Models.ServiceConfigurationValue> ServiceConfigurationParameters = DynamicListExposer<Models.Service, Models.ServiceConfigurationValue>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.Configurations, String.Join(".", nameof(ServiceExposers), nameof(ServiceConfigurationParameters))));
		public static readonly Exposer<Models.Service, string> ServiceID = new Exposer<Models.Service, string>((obj) => obj.ServiceID, String.Join(".", nameof(ServiceExposers), nameof(ServiceID)));

		public static class ServiceItemsSection
		{
			public static readonly DynamicListExposer<Models.Service, string> Label = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Label).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(Label))));
			public static readonly DynamicListExposer<Models.Service, long> ServiceItemID = DynamicListExposer<Models.Service, long>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.ID).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemID))));
			public static readonly DynamicListExposer<Models.Service, SlcServicemanagementIds.Enums.ServiceitemtypesEnum> ServiceItemType = DynamicListExposer<Models.Service, SlcServicemanagementIds.Enums.ServiceitemtypesEnum>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Type).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemType))));
			public static readonly DynamicListExposer<Models.Service, string> DefinitionReference = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.DefinitionReference).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(DefinitionReference))));
			public static readonly DynamicListExposer<Models.Service, string> ServiceItemScript = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.Script).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ServiceItemScript))));
			public static readonly DynamicListExposer<Models.Service, string> ImplementationReference = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItems.Select(x => x.ImplementationReference).Where(x => x != null), String.Join(".", nameof(SlcServicemanagement.ServiceItemsSection), nameof(ImplementationReference))));
		}

		public static class ServiceItemRelationshipsSection
		{
			public static readonly DynamicListExposer<Models.Service, string> Type = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.Type).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(Type))));
			public static readonly DynamicListExposer<Models.Service, string> ParentServiceItem = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ParentServiceItem))));
			public static readonly DynamicListExposer<Models.Service, string> ChildServiceItem = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ChildServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ChildServiceItem))));
			public static readonly DynamicListExposer<Models.Service, string> ParentServiceItemInterfaceID = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItem).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ParentServiceItemInterfaceID))));
			public static readonly DynamicListExposer<Models.Service, string> ChildServiceItemInterfaceID = DynamicListExposer<Models.Service, string>.CreateFromListExposer(new Exposer<Models.Service, IEnumerable>((obj) => obj.ServiceItemsRelationships.Select(x => x.ParentServiceItemInterfaceId).Where(x => x != null), String.Join(".", nameof(ServiceItemRelationshipSection), nameof(ChildServiceItemInterfaceID))));
		}
	}
}
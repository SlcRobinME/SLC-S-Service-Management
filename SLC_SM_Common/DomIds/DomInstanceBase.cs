//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
    using System;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.ManagerStore;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Serves as the abstract base class for wrapper classes that provide access to DOM instances.
    /// The <see cref="DomInstanceBase"/> class defines the common functionality and structure for interacting with DOM objects stored in the database, serving as a foundation for derived classes that wrap specific DOM instances.
    /// </summary>
    public abstract class DomInstanceBase : IEquatable<DomInstanceBase>
    {
        protected DomInstanceBase(DomDefinitionId definitionId)
        {
            if (definitionId == null)
                throw new ArgumentNullException(nameof(definitionId));
            domInstance = new DomInstance{DomDefinitionId = definitionId};
        }

        protected DomInstanceBase(DomDefinitionId definitionId, Guid id)
        {
            if (definitionId == null)
                throw new ArgumentNullException(nameof(definitionId));
            if (id == Guid.Empty)
                throw new ArgumentException("The id cannot be an empty guid", nameof(id));
            domInstance = new DomInstance{ID = new DomInstanceId(id)
            {ModuleId = definitionId.ModuleId}, DomDefinitionId = definitionId};
        }

        protected DomInstanceBase(DomInstance domInstance)
        {
            if (domInstance == null)
                throw new ArgumentNullException(nameof(domInstance));
            this.domInstance = domInstance;
        }

        /// <summary>
        /// Gets the Module ID of the DOM Instance.
        /// </summary>
        public String ModuleId
        {
            get
            {
                return domInstance.DomDefinitionId.ModuleId;
            }
        }

        /// <summary>
        /// Gets the ID of the DOM Instance.
        /// </summary>
        public DomInstanceId ID
        {
            get
            {
                return domInstance.ID;
            }
        }

        /// <summary>
        /// Gets the name of the DOM Instance.
        /// </summary>
        public String Name
        {
            get
            {
                return domInstance.Name;
            }
        }

        /// <summary>
        /// Gets the Status ID of the DOM Instance.
        /// </summary>
        public String StatusId
        {
            get
            {
                return domInstance.StatusId;
            }
        }

        /// <summary>
        /// Gets the underlying DOM Instance.
        /// </summary>
        public DomDefinitionId DomDefinitionId
        {
            get
            {
                return domInstance.DomDefinitionId;
            }
        }

        protected DomInstance domInstance { get; set; }

        /// <summary>
        /// Gets the datetime when the DOM Instance was created in UTC.
        /// </summary>
        public DateTime? CreatedAt
        {
            get
            {
                var createdAt = ((ITrackCreatedAt)domInstance).CreatedAt;
                if (createdAt == null)
                    return null;
                else
                    return createdAt.ToUniversalTime();
            }
        }

        /// <summary>
        /// Gets the user that created the DOM Instance.
        /// </summary>
        public string CreatedBy
        {
            get
            {
                return ((ITrackCreatedBy)domInstance).CreatedBy;
            }
        }

        /// <summary>
        /// Gets the datetime when the DOM Instance was last modified in UTC.
        /// </summary>
        public DateTime? LastModified
        {
            get
            {
                var lastModified = ((ITrackLastModified)domInstance).LastModified;
                if (lastModified == null)
                    return null;
                else
                    return lastModified.ToUniversalTime();
            }
        }

        /// <summary>
        /// Gets the user that last modified the DOM Instance.
        /// </summary>
        public string LastModifiedBy
        {
            get
            {
                return ((ITrackLastModifiedBy)domInstance).LastModifiedBy;
            }
        }

        public static implicit operator DomInstanceId(DomInstanceBase instance)
        {
            return instance.ID;
        }

        public static implicit operator DomInstance(DomInstanceBase instance)
        {
            return instance.ToInstance();
        }

        public static bool operator ==(DomInstanceBase left, DomInstanceBase right)
        {
            if (left is null)
            {
                return right is null;
            }

            return left.Equals(right);
        }

        public static bool operator !=(DomInstanceBase left, DomInstanceBase right)
        {
            return !(left == right);
        }

        /// <summary>
        /// Deletes this DOM Instance from the database.
        /// </summary>
        /// <param name="messageHandler">The connection to the DataMiner system.</param>
        public void Delete(Func<DMSMessage[], DMSMessage[]> messageHandler)
        {
            Delete(new DomHelper(messageHandler, ModuleId));
        }

        /// <summary>
        /// Deletes this DOM Instance from the database.
        /// </summary>
        /// <param name="helper">The connection to the DataMiner system.</param>
        public void Delete(DomHelper helper)
        {
            helper.DomInstances.Delete(domInstance);
        }

        /// <summary>
        /// Saves this DOM Instance to the database.
        /// </summary>
        /// <param name="messageHandler">The connection to the DataMiner system.</param>
        public void Save(Func<DMSMessage[], DMSMessage[]> messageHandler)
        {
            Save(new DomHelper(messageHandler, ModuleId));
        }

        /// <summary>
        /// Saves this DOM Instance to the database.
        /// </summary>
        /// <param name="helper">The connection to the DataMiner system.</param>
        public abstract void Save(DomHelper helper);
        /// <summary>
        /// Return the DOM Instance object with all the fields filled in according to this object.
        /// </summary>
        public DomInstance ToInstance()
        {
            BeforeToInstance();
            var instance = InternalToInstance();
            AfterToInstance();
            return instance;
        }

        /// <summary>
        /// Optional method that runs before the internal ToInstance method runs.
        /// </summary>
        protected virtual void BeforeToInstance()
        {
        }

        /// <summary>
        /// Return the DOM Instance object with all the fields filled in according to this object.
        /// </summary>
        protected abstract DomInstance InternalToInstance();
        /// <summary>
        /// Optional method that runs after the internal ToInstance method runs.
        /// </summary>
        protected virtual void AfterToInstance()
        {
        }

        protected abstract void InitializeProperties();
        /// <summary>
        /// Optional method that runs after the object is constructed and the initialize has ran.
        /// </summary>
        protected virtual void AfterLoad()
        {
        }

        public override int GetHashCode()
        {
            return this.ID.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as DomInstanceBase);
        }

        public bool Equals(DomInstanceBase other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return this.ID.Equals(other.ID);
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
    using System;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public abstract class DomSectionBase : IEquatable<DomSectionBase>
    {
        protected Section section;
        protected DomSectionBase(SectionDefinitionID id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));
            this.section = new Section(id);
            AfterLoad();
        }

        protected DomSectionBase(SectionDefinition definition)
        {
            if (definition == null)
                throw new ArgumentNullException(nameof(definition));
            this.section = new Section(definition);
            AfterLoad();
        }

        protected DomSectionBase(Section section, SectionDefinitionID id)
        {
            if (section == null)
                throw new ArgumentNullException(nameof(section));
            if (section.SectionDefinitionID == null)
            {
                throw new ArgumentException("The given section doesn't have a valid SectionDefinitionId.", nameof(section));
            }

            if (!section.SectionDefinitionID.Equals(id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(id)}'", nameof(section));
            }

            this.section = section;
            AfterLoad();
        }

        /// <summary>
        /// Gets the section's ID.
        /// </summary>
        public SectionID SectionID
        {
            get
            {
                return section.ID;
            }
        }

        /// <summary>
        /// Gets the section's Section Definition ID.
        /// </summary>
        public SectionDefinitionID SectionDefinitionID
        {
            get
            {
                return section.SectionDefinitionID;
            }
        }

        /// <summary>
        /// Gets a value indicating whether the section is empty.
        /// </summary>
        /// <value>
        /// <see langword="true"/> if the section doesn't contains any field values, otherwise, <see langword="false"/>.
        /// </value>
        public bool IsEmpty
        {
            get
            {
                return !section.FieldValues.Any();
            }
        }

        public static implicit operator SectionDefinitionID(DomSectionBase sectionBase)
        {
            return sectionBase.section.SectionDefinitionID;
        }

        public static implicit operator SectionDefinition(DomSectionBase sectionBase)
        {
            return sectionBase.section.GetSectionDefinition();
        }

        public static bool operator ==(DomSectionBase left, DomSectionBase right)
        {
            if (left is null)
            {
                return right is null;
            }

            return left.Equals(right);
        }

        public static bool operator !=(DomSectionBase left, DomSectionBase right)
        {
            return !(left == right);
        }

        public override string ToString()
        {
            return $"{this.section.SectionDefinitionID}";
        }

        /// <summary>
        /// Optional method that runs at the end of the constructor.
        /// </summary>
        protected virtual void AfterLoad()
        {
        }

        public virtual Section ToSection()
        {
            BeforeToSection();
            var section = InternalToSection();
            AfterToSection();
            return section;
        }

        /// <summary>
        /// Optional method that runs before the internal ToSection method runs.
        /// </summary>
        protected virtual void BeforeToSection()
        {
        }

        protected virtual Section InternalToSection()
        {
            return this.section;
        }

        /// <summary>
        /// Optional method that runs after the internal ToSection method runs.
        /// </summary>
        protected virtual void AfterToSection()
        {
        }

        public override int GetHashCode()
        {
            return this.SectionID.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as DomSectionBase);
        }

        public bool Equals(DomSectionBase other)
        {
            if (other is null)
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            return this.SectionID.Equals(other.SectionID);
        }
    }
}
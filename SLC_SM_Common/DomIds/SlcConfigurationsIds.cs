//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcConfigurations
{
    using System;
    using System.ComponentModel;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcConfigurationsIds
    {
        public const string ModuleId = "(slc)configurations";
        public static class Enums
        {
            public enum Type
            {
                Number = 0,
                Discrete = 1,
                Text = 2
            }
        }

        public static class Sections
        {
            public static class ConfigurationParameterInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("73d0997f-7268-467e-9540-d37e91ebdac2"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID ParameterName { get; } = new FieldDescriptorID(new Guid("0a12c0f7-fe73-4995-85fe-3af4234b22c9"));
                public static FieldDescriptorID Type { get; } = new FieldDescriptorID(new Guid("2e5aedca-5443-4a1f-a08d-2adf1a8baefa"));
                public static FieldDescriptorID NumberOptions { get; } = new FieldDescriptorID(new Guid("ef760d85-0014-4e7f-b886-d3d33022e764"));
                public static FieldDescriptorID DiscreteOptions { get; } = new FieldDescriptorID(new Guid("bd0055c6-a665-4224-8be4-a9123756f277"));
                public static FieldDescriptorID TextOptions { get; } = new FieldDescriptorID(new Guid("4b13eb14-c503-4afd-98f2-f94deb8fe90c"));
            }

            public static class ConfigurationParameterValue
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("32879046-c83c-49d8-b6bc-39c77bc7b3b0"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID Label { get; } = new FieldDescriptorID(new Guid("126e4e03-fb84-4785-b8c6-7915d5c813c2"));
                public static FieldDescriptorID ConfigurationParameterReference { get; } = new FieldDescriptorID(new Guid("7b6608cf-93b3-49fd-85d6-710c545c80e3"));
                public static FieldDescriptorID Type { get; } = new FieldDescriptorID(new Guid("9ba1a433-66d5-40aa-889f-db4f859fd6c9"));
                public static FieldDescriptorID NumberValueOptions { get; } = new FieldDescriptorID(new Guid("49d9d679-0245-4efd-ac30-67da13d8919a"));
                public static FieldDescriptorID DiscreteValueOptions { get; } = new FieldDescriptorID(new Guid("428e3121-3f51-4e8d-8ff8-00252f4f9c60"));
                public static FieldDescriptorID TextValueOptions { get; } = new FieldDescriptorID(new Guid("b3adb3a8-13ef-4abe-8848-55046a1cac7f"));
                public static FieldDescriptorID StringValue { get; } = new FieldDescriptorID(new Guid("f5c66e83-a5be-4d6a-a525-a8dc128e88fd"));
                public static FieldDescriptorID DoubleValue { get; } = new FieldDescriptorID(new Guid("ec86e76c-4504-499e-98a1-f7ecfe95d951"));
                public static FieldDescriptorID LinkedConfigurationParameter { get; } = new FieldDescriptorID(new Guid("429acf15-69ab-4ee5-8f34-fec675b09b17"));
                public static FieldDescriptorID LinkedInstanceReference { get; } = new FieldDescriptorID(new Guid("438b7699-9be3-4737-bb4f-f680efb7b7ee"));
                public static FieldDescriptorID ValueFixed { get; } = new FieldDescriptorID(new Guid("d92f4a69-0d9d-4db1-8135-5ec746dac8a0"));
            }

            public static class DiscreteValue
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("16f36d1f-a19e-4c77-bfd4-2c33a723d57f"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID Value { get; } = new FieldDescriptorID(new Guid("10be0fab-9224-45b6-9a6c-84e801ed2703"));
            }

            public static class ConfigurationUnitInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("318f27dc-a0d6-4cae-9e1f-1c4e97b41577"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID UnitName { get; } = new FieldDescriptorID(new Guid("44182199-823b-4fb8-84bc-5106bdc5345f"));
                public static FieldDescriptorID RatioWithRespectToReference { get; } = new FieldDescriptorID(new Guid("b26ea0a2-7c5d-4dea-b982-7b8780eecdf7"));
                public static FieldDescriptorID ReferenceUnit { get; } = new FieldDescriptorID(new Guid("6647c7a2-1538-444b-86b4-94b71cc936cb"));
            }

            public static class TextParameterOptions
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("d63d2714-b2af-47ea-9569-9da50e3faa0c"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID Regex { get; } = new FieldDescriptorID(new Guid("7b079ce3-27d7-4a2e-a27b-6b0b510b37bc"));
                public static FieldDescriptorID UserMessage { get; } = new FieldDescriptorID(new Guid("5050e459-cc37-4439-a82c-f5664edb6afb"));
                public static FieldDescriptorID Default { get; } = new FieldDescriptorID(new Guid("0aefafab-576a-43a4-a638-2f20894ea0f4"));
            }

            public static class NumberParameterOptions
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("fda64a47-ed72-4f4b-a896-3edb8e0009f8"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID Units { get; } = new FieldDescriptorID(new Guid("5b31eaec-83a8-4e67-a6ae-3d641e396584"));
                public static FieldDescriptorID DefaultUnit { get; } = new FieldDescriptorID(new Guid("4a2062fb-1d6c-4b35-9403-b0d1450f1bc7"));
                public static FieldDescriptorID MinRange { get; } = new FieldDescriptorID(new Guid("cc21fc4e-6108-4fbd-8f83-fe9140d750b7"));
                public static FieldDescriptorID MaxRange { get; } = new FieldDescriptorID(new Guid("08ba79bc-5296-458b-bc88-702051e5ff4f"));
                public static FieldDescriptorID StepSize { get; } = new FieldDescriptorID(new Guid("f221d3b8-fcf6-4f8b-85cf-46a11c9d955f"));
                public static FieldDescriptorID Decimals { get; } = new FieldDescriptorID(new Guid("8fe44feb-4e8e-4de4-9853-69c791fe0a0b"));
                public static FieldDescriptorID DefaultValue { get; } = new FieldDescriptorID(new Guid("2c4ab3d6-c9bf-4b07-b30e-56d1e655e3a3"));
            }

            public static class DiscreteParameterOptions
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("5ddf7d8b-f99f-4f38-a931-a8c386e0883b"))
                {ModuleId = "(slc)configurations"};
                public static FieldDescriptorID DefaultDiscreteValue { get; } = new FieldDescriptorID(new Guid("c4806ad6-1797-4316-a168-53a4b03d2590"));
                public static FieldDescriptorID DiscreteValues { get; } = new FieldDescriptorID(new Guid("85bec10c-6693-468e-937f-bff04f0c869e"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId ConfigurationParameterValue { get; } = new DomDefinitionId(new Guid("6dd99cdc-9196-4c97-88fc-24fef32dd776"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId TextParameterOptions { get; } = new DomDefinitionId(new Guid("95f4bec5-c65b-4441-926b-52c9f42eddb9"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId ConfigurationParameters { get; } = new DomDefinitionId(new Guid("277b0f63-9ac2-47ed-9793-705a0091ab8d"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId DiscreteValues { get; } = new DomDefinitionId(new Guid("1fb7b93f-cc9d-46c0-b329-114991f54744"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId DiscreteParameterOptions { get; } = new DomDefinitionId(new Guid("adaa89eb-2453-48a4-b656-e6425855787f"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId NumberParameterOptions { get; } = new DomDefinitionId(new Guid("db576703-abd5-4d64-a882-74a49547f076"))
            {ModuleId = "(slc)configurations"};
            public static DomDefinitionId ConfigurationUnit { get; } = new DomDefinitionId(new Guid("0c6c3c61-689c-4e28-bf4b-0654eca17b21"))
            {ModuleId = "(slc)configurations"};
        }

        public static class Behaviors
        {
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcConfigurations
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationParameterValueInstance DOM instance.
    /// The <see cref="ConfigurationParameterValueInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationParameterValueInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterValueInstance"/> class. Creates an empty <see cref="ConfigurationParameterValueInstance"/> instance with default settings.
        /// </summary>
        public ConfigurationParameterValueInstance() : base(SlcConfigurationsIds.Definitions.ConfigurationParameterValue)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterValueInstance"/> class. Creates an empty <see cref="ConfigurationParameterValueInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public ConfigurationParameterValueInstance(Guid id) : base(SlcConfigurationsIds.Definitions.ConfigurationParameterValue, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterValueInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ConfigurationParameterValueInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationParameterValueInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.ConfigurationParameterValue))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.ConfigurationParameterValue)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the ConfigurationParameterValue section of the DOM Instance.
        /// </summary>
        public ConfigurationParameterValueSection ConfigurationParameterValue { get; set; }

        public static explicit operator ConfigurationParameterValueInstance(DomInstance instance)
        {
            return new ConfigurationParameterValueInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationParameterValueInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterValueInstance"/> object that is a deep copy of this instance.</returns>
        public ConfigurationParameterValueInstance Clone()
        {
            return new ConfigurationParameterValueInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationParameterValueInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterValueInstance"/> object that is a copy of this instance but with a different id.</returns>
        public ConfigurationParameterValueInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new ConfigurationParameterValueInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ConfigurationParameterValue.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _configurationParameterValue = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Id));
            if (_configurationParameterValue is null)
            {
                ConfigurationParameterValue = new ConfigurationParameterValueSection();
            }
            else
            {
                ConfigurationParameterValue = new ConfigurationParameterValueSection(_configurationParameterValue);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TextParameterOptionsInstance DOM instance.
    /// The <see cref="TextParameterOptionsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TextParameterOptionsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextParameterOptionsInstance"/> class. Creates an empty <see cref="TextParameterOptionsInstance"/> instance with default settings.
        /// </summary>
        public TextParameterOptionsInstance() : base(SlcConfigurationsIds.Definitions.TextParameterOptions)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextParameterOptionsInstance"/> class. Creates an empty <see cref="TextParameterOptionsInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public TextParameterOptionsInstance(Guid id) : base(SlcConfigurationsIds.Definitions.TextParameterOptions, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextParameterOptionsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="TextParameterOptionsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TextParameterOptionsInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.TextParameterOptions))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.TextParameterOptions)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the TextParameterOptions section of the DOM Instance.
        /// </summary>
        public TextParameterOptionsSection TextParameterOptions { get; set; }

        public static explicit operator TextParameterOptionsInstance(DomInstance instance)
        {
            return new TextParameterOptionsInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="TextParameterOptionsInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="TextParameterOptionsInstance"/> object that is a deep copy of this instance.</returns>
        public TextParameterOptionsInstance Clone()
        {
            return new TextParameterOptionsInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="TextParameterOptionsInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="TextParameterOptionsInstance"/> object that is a copy of this instance but with a different id.</returns>
        public TextParameterOptionsInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new TextParameterOptionsInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(TextParameterOptions.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _textParameterOptions = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.TextParameterOptions.Id));
            if (_textParameterOptions is null)
            {
                TextParameterOptions = new TextParameterOptionsSection();
            }
            else
            {
                TextParameterOptions = new TextParameterOptionsSection(_textParameterOptions);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationParametersInstance DOM instance.
    /// The <see cref="ConfigurationParametersInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationParametersInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParametersInstance"/> class. Creates an empty <see cref="ConfigurationParametersInstance"/> instance with default settings.
        /// </summary>
        public ConfigurationParametersInstance() : base(SlcConfigurationsIds.Definitions.ConfigurationParameters)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParametersInstance"/> class. Creates an empty <see cref="ConfigurationParametersInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public ConfigurationParametersInstance(Guid id) : base(SlcConfigurationsIds.Definitions.ConfigurationParameters, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParametersInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ConfigurationParametersInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationParametersInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.ConfigurationParameters))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.ConfigurationParameters)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the ConfigurationParameterInfo section of the DOM Instance.
        /// </summary>
        public ConfigurationParameterInfoSection ConfigurationParameterInfo { get; set; }

        public static explicit operator ConfigurationParametersInstance(DomInstance instance)
        {
            return new ConfigurationParametersInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationParametersInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParametersInstance"/> object that is a deep copy of this instance.</returns>
        public ConfigurationParametersInstance Clone()
        {
            return new ConfigurationParametersInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationParametersInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParametersInstance"/> object that is a copy of this instance but with a different id.</returns>
        public ConfigurationParametersInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new ConfigurationParametersInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ConfigurationParameterInfo.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _configurationParameterInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Id));
            if (_configurationParameterInfo is null)
            {
                ConfigurationParameterInfo = new ConfigurationParameterInfoSection();
            }
            else
            {
                ConfigurationParameterInfo = new ConfigurationParameterInfoSection(_configurationParameterInfo);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a DiscreteValuesInstance DOM instance.
    /// The <see cref="DiscreteValuesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class DiscreteValuesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteValuesInstance"/> class. Creates an empty <see cref="DiscreteValuesInstance"/> instance with default settings.
        /// </summary>
        public DiscreteValuesInstance() : base(SlcConfigurationsIds.Definitions.DiscreteValues)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteValuesInstance"/> class. Creates an empty <see cref="DiscreteValuesInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public DiscreteValuesInstance(Guid id) : base(SlcConfigurationsIds.Definitions.DiscreteValues, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteValuesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="DiscreteValuesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public DiscreteValuesInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.DiscreteValues))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.DiscreteValues)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the DiscreteValue section of the DOM Instance.
        /// </summary>
        public DiscreteValueSection DiscreteValue { get; set; }

        public static explicit operator DiscreteValuesInstance(DomInstance instance)
        {
            return new DiscreteValuesInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="DiscreteValuesInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="DiscreteValuesInstance"/> object that is a deep copy of this instance.</returns>
        public DiscreteValuesInstance Clone()
        {
            return new DiscreteValuesInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="DiscreteValuesInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="DiscreteValuesInstance"/> object that is a copy of this instance but with a different id.</returns>
        public DiscreteValuesInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new DiscreteValuesInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(DiscreteValue.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _discreteValue = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.DiscreteValue.Id));
            if (_discreteValue is null)
            {
                DiscreteValue = new DiscreteValueSection();
            }
            else
            {
                DiscreteValue = new DiscreteValueSection(_discreteValue);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a DiscreteParameterOptionsInstance DOM instance.
    /// The <see cref="DiscreteParameterOptionsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class DiscreteParameterOptionsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteParameterOptionsInstance"/> class. Creates an empty <see cref="DiscreteParameterOptionsInstance"/> instance with default settings.
        /// </summary>
        public DiscreteParameterOptionsInstance() : base(SlcConfigurationsIds.Definitions.DiscreteParameterOptions)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteParameterOptionsInstance"/> class. Creates an empty <see cref="DiscreteParameterOptionsInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public DiscreteParameterOptionsInstance(Guid id) : base(SlcConfigurationsIds.Definitions.DiscreteParameterOptions, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteParameterOptionsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="DiscreteParameterOptionsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public DiscreteParameterOptionsInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.DiscreteParameterOptions))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.DiscreteParameterOptions)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the DiscreteParameterOptions section of the DOM Instance.
        /// </summary>
        public DiscreteParameterOptionsSection DiscreteParameterOptions { get; set; }

        public static explicit operator DiscreteParameterOptionsInstance(DomInstance instance)
        {
            return new DiscreteParameterOptionsInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="DiscreteParameterOptionsInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="DiscreteParameterOptionsInstance"/> object that is a deep copy of this instance.</returns>
        public DiscreteParameterOptionsInstance Clone()
        {
            return new DiscreteParameterOptionsInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="DiscreteParameterOptionsInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="DiscreteParameterOptionsInstance"/> object that is a copy of this instance but with a different id.</returns>
        public DiscreteParameterOptionsInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new DiscreteParameterOptionsInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(DiscreteParameterOptions.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _discreteParameterOptions = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.DiscreteParameterOptions.Id));
            if (_discreteParameterOptions is null)
            {
                DiscreteParameterOptions = new DiscreteParameterOptionsSection();
            }
            else
            {
                DiscreteParameterOptions = new DiscreteParameterOptionsSection(_discreteParameterOptions);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a NumberParameterOptionsInstance DOM instance.
    /// The <see cref="NumberParameterOptionsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class NumberParameterOptionsInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberParameterOptionsInstance"/> class. Creates an empty <see cref="NumberParameterOptionsInstance"/> instance with default settings.
        /// </summary>
        public NumberParameterOptionsInstance() : base(SlcConfigurationsIds.Definitions.NumberParameterOptions)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberParameterOptionsInstance"/> class. Creates an empty <see cref="NumberParameterOptionsInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public NumberParameterOptionsInstance(Guid id) : base(SlcConfigurationsIds.Definitions.NumberParameterOptions, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberParameterOptionsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="NumberParameterOptionsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public NumberParameterOptionsInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.NumberParameterOptions))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.NumberParameterOptions)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the NumberParameterOptions section of the DOM Instance.
        /// </summary>
        public NumberParameterOptionsSection NumberParameterOptions { get; set; }

        public static explicit operator NumberParameterOptionsInstance(DomInstance instance)
        {
            return new NumberParameterOptionsInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="NumberParameterOptionsInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="NumberParameterOptionsInstance"/> object that is a deep copy of this instance.</returns>
        public NumberParameterOptionsInstance Clone()
        {
            return new NumberParameterOptionsInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="NumberParameterOptionsInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="NumberParameterOptionsInstance"/> object that is a copy of this instance but with a different id.</returns>
        public NumberParameterOptionsInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new NumberParameterOptionsInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(NumberParameterOptions.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _numberParameterOptions = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.NumberParameterOptions.Id));
            if (_numberParameterOptions is null)
            {
                NumberParameterOptions = new NumberParameterOptionsSection();
            }
            else
            {
                NumberParameterOptions = new NumberParameterOptionsSection(_numberParameterOptions);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationUnitInstance DOM instance.
    /// The <see cref="ConfigurationUnitInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationUnitInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationUnitInstance"/> class. Creates an empty <see cref="ConfigurationUnitInstance"/> instance with default settings.
        /// </summary>
        public ConfigurationUnitInstance() : base(SlcConfigurationsIds.Definitions.ConfigurationUnit)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationUnitInstance"/> class. Creates an empty <see cref="ConfigurationUnitInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public ConfigurationUnitInstance(Guid id) : base(SlcConfigurationsIds.Definitions.ConfigurationUnit, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationUnitInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ConfigurationUnitInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationUnitInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcConfigurationsIds.Definitions.ConfigurationUnit))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcConfigurationsIds.Definitions.ConfigurationUnit)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the ConfigurationUnitInfo section of the DOM Instance.
        /// </summary>
        public ConfigurationUnitInfoSection ConfigurationUnitInfo { get; set; }

        public static explicit operator ConfigurationUnitInstance(DomInstance instance)
        {
            return new ConfigurationUnitInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationUnitInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationUnitInstance"/> object that is a deep copy of this instance.</returns>
        public ConfigurationUnitInstance Clone()
        {
            return new ConfigurationUnitInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationUnitInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationUnitInstance"/> object that is a copy of this instance but with a different id.</returns>
        public ConfigurationUnitInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new ConfigurationUnitInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ConfigurationUnitInfo.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _configurationUnitInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.Id));
            if (_configurationUnitInfo is null)
            {
                ConfigurationUnitInfo = new ConfigurationUnitInfoSection();
            }
            else
            {
                ConfigurationUnitInfo = new ConfigurationUnitInfoSection(_configurationUnitInfo);
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcConfigurations
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationParameterInfoSection section.
    /// The <see cref="ConfigurationParameterInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationParameterInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterInfoSection"/> class. Creates an empty <see cref="ConfigurationParameterInfoSection"/> object with default settings.
        /// </summary>
        public ConfigurationParameterInfoSection() : base(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConfigurationParameterInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationParameterInfoSection(Section section) : base(section, SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the ParameterName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ParameterName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.ParameterName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.ParameterName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.ParameterName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Type field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcConfigurationsIds.Enums.Type? Type
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Type);
                if (wrapper != null)
                {
                    return (SlcConfigurationsIds.Enums.Type? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Type);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Type, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NumberOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? NumberOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.NumberOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.NumberOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.NumberOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DiscreteOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? DiscreteOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.DiscreteOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.DiscreteOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.DiscreteOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TextOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TextOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.TextOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.TextOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.TextOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationParameterInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterInfoSection"/> object that is a deep copy of this section.</returns>
        public ConfigurationParameterInfoSection Clone()
        {
            return new ConfigurationParameterInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationParameterInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public ConfigurationParameterInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new ConfigurationParameterInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.ParameterName) == null)
                throw new InvalidOperationException("'ParameterName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcConfigurationsIds.Sections.ConfigurationParameterInfo.Type) == null)
                throw new InvalidOperationException("'Type' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationParameterValueSection section.
    /// The <see cref="ConfigurationParameterValueSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationParameterValueSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterValueSection"/> class. Creates an empty <see cref="ConfigurationParameterValueSection"/> object with default settings.
        /// </summary>
        public ConfigurationParameterValueSection() : base(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationParameterValueSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConfigurationParameterValueSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationParameterValueSection(Section section) : base(section, SlcConfigurationsIds.Sections.ConfigurationParameterValue.Id)
        {
        }

        /// <summary>
        /// Gets or sets the Label field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Label
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Label);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Label);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Label, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ConfigurationParameterReference field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ConfigurationParameterReference
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ConfigurationParameterReference);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ConfigurationParameterReference);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ConfigurationParameterReference, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Type field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcConfigurationsIds.Enums.Type? Type
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Type);
                if (wrapper != null)
                {
                    return (SlcConfigurationsIds.Enums.Type? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Type);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.Type, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the NumberValueOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? NumberValueOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.NumberValueOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.NumberValueOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.NumberValueOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DiscreteValueOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? DiscreteValueOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DiscreteValueOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DiscreteValueOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DiscreteValueOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TextValueOptions field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TextValueOptions
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.TextValueOptions);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.TextValueOptions);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.TextValueOptions, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StringValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String StringValue
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.StringValue);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.StringValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.StringValue, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DoubleValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? DoubleValue
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DoubleValue);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DoubleValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.DoubleValue, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the LinkedConfigurationParameter field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? LinkedConfigurationParameter
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedConfigurationParameter);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedConfigurationParameter);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedConfigurationParameter, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the LinkedInstanceReference field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String LinkedInstanceReference
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedInstanceReference);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedInstanceReference);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.LinkedInstanceReference, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ValueFixed field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ValueFixed
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ValueFixed);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ValueFixed);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationParameterValue.ValueFixed, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationParameterValueSection"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterValueSection"/> object that is a deep copy of this section.</returns>
        public ConfigurationParameterValueSection Clone()
        {
            return new ConfigurationParameterValueSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationParameterValueSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationParameterValueSection"/> object that is a copy of this section but with a different id.</returns>
        public ConfigurationParameterValueSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new ConfigurationParameterValueSection(section);
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a DiscreteValueSection section.
    /// The <see cref="DiscreteValueSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class DiscreteValueSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteValueSection"/> class. Creates an empty <see cref="DiscreteValueSection"/> object with default settings.
        /// </summary>
        public DiscreteValueSection() : base(SlcConfigurationsIds.Sections.DiscreteValue.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteValueSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="DiscreteValueSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public DiscreteValueSection(Section section) : base(section, SlcConfigurationsIds.Sections.DiscreteValue.Id)
        {
        }

        /// <summary>
        /// Gets or sets the Value field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Value
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.DiscreteValue.Value);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.DiscreteValue.Value);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.DiscreteValue.Value, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="DiscreteValueSection"/>.
        /// </summary>
        /// <returns>A new <see cref="DiscreteValueSection"/> object that is a deep copy of this section.</returns>
        public DiscreteValueSection Clone()
        {
            return new DiscreteValueSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="DiscreteValueSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="DiscreteValueSection"/> object that is a copy of this section but with a different id.</returns>
        public DiscreteValueSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new DiscreteValueSection(section);
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ConfigurationUnitInfoSection section.
    /// The <see cref="ConfigurationUnitInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ConfigurationUnitInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationUnitInfoSection"/> class. Creates an empty <see cref="ConfigurationUnitInfoSection"/> object with default settings.
        /// </summary>
        public ConfigurationUnitInfoSection() : base(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationUnitInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConfigurationUnitInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ConfigurationUnitInfoSection(Section section) : base(section, SlcConfigurationsIds.Sections.ConfigurationUnitInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the UnitName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String UnitName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.UnitName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.UnitName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.UnitName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the RatioWithRespectToReference field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? RatioWithRespectToReference
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.RatioWithRespectToReference);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.RatioWithRespectToReference);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.RatioWithRespectToReference, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ReferenceUnit field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ReferenceUnit
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.ReferenceUnit);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.ReferenceUnit);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.ReferenceUnit, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ConfigurationUnitInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationUnitInfoSection"/> object that is a deep copy of this section.</returns>
        public ConfigurationUnitInfoSection Clone()
        {
            return new ConfigurationUnitInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ConfigurationUnitInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ConfigurationUnitInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public ConfigurationUnitInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new ConfigurationUnitInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcConfigurationsIds.Sections.ConfigurationUnitInfo.UnitName) == null)
                throw new InvalidOperationException("'UnitName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TextParameterOptionsSection section.
    /// The <see cref="TextParameterOptionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TextParameterOptionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextParameterOptionsSection"/> class. Creates an empty <see cref="TextParameterOptionsSection"/> object with default settings.
        /// </summary>
        public TextParameterOptionsSection() : base(SlcConfigurationsIds.Sections.TextParameterOptions.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextParameterOptionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TextParameterOptionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TextParameterOptionsSection(Section section) : base(section, SlcConfigurationsIds.Sections.TextParameterOptions.Id)
        {
        }

        /// <summary>
        /// Gets or sets the Regex field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Regex
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.TextParameterOptions.Regex);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.TextParameterOptions.Regex);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.TextParameterOptions.Regex, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the UserMessage field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String UserMessage
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.TextParameterOptions.UserMessage);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.TextParameterOptions.UserMessage);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.TextParameterOptions.UserMessage, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Default field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Default
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcConfigurationsIds.Sections.TextParameterOptions.Default);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.TextParameterOptions.Default);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.TextParameterOptions.Default, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="TextParameterOptionsSection"/>.
        /// </summary>
        /// <returns>A new <see cref="TextParameterOptionsSection"/> object that is a deep copy of this section.</returns>
        public TextParameterOptionsSection Clone()
        {
            return new TextParameterOptionsSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="TextParameterOptionsSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="TextParameterOptionsSection"/> object that is a copy of this section but with a different id.</returns>
        public TextParameterOptionsSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new TextParameterOptionsSection(section);
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a NumberParameterOptionsSection section.
    /// The <see cref="NumberParameterOptionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class NumberParameterOptionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NumberParameterOptionsSection"/> class. Creates an empty <see cref="NumberParameterOptionsSection"/> object with default settings.
        /// </summary>
        public NumberParameterOptionsSection() : base(SlcConfigurationsIds.Sections.NumberParameterOptions.Id)
        {
            Units = new List<Guid>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NumberParameterOptionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="NumberParameterOptionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public NumberParameterOptionsSection(Section section) : base(section, SlcConfigurationsIds.Sections.NumberParameterOptions.Id)
        {
            var units = section.GetListValue<Guid>(SlcConfigurationsIds.Sections.NumberParameterOptions.Units);
            Units = units != null ? units.Values : new List<Guid>();
        }

        /// <summary>
        /// Gets or sets the Units field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public IList<Guid> Units { get; private set; }

        /// <summary>
        /// Gets or sets the DefaultUnit field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? DefaultUnit
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultUnit);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultUnit);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultUnit, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the MinRange field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? MinRange
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.NumberParameterOptions.MinRange);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.MinRange);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.MinRange, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the MaxRange field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? MaxRange
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.NumberParameterOptions.MaxRange);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.MaxRange);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.MaxRange, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the StepSize field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? StepSize
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.NumberParameterOptions.StepSize);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.StepSize);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.StepSize, (Double)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Decimals field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? Decimals
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcConfigurationsIds.Sections.NumberParameterOptions.Decimals);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.Decimals);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.Decimals, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DefaultValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Double? DefaultValue
        {
            get
            {
                var wrapper = section.GetValue<Double>(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultValue);
                if (wrapper != null)
                {
                    return (Double? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.NumberParameterOptions.DefaultValue, (Double)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="NumberParameterOptionsSection"/>.
        /// </summary>
        /// <returns>A new <see cref="NumberParameterOptionsSection"/> object that is a deep copy of this section.</returns>
        public NumberParameterOptionsSection Clone()
        {
            return new NumberParameterOptionsSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="NumberParameterOptionsSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="NumberParameterOptionsSection"/> object that is a copy of this section but with a different id.</returns>
        public NumberParameterOptionsSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new NumberParameterOptionsSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (Units.Count == 0)
                section.RemoveFieldValueById(SlcConfigurationsIds.Sections.NumberParameterOptions.Units);
            else
                section.AddOrUpdateListValue<Guid>(SlcConfigurationsIds.Sections.NumberParameterOptions.Units, Units.ToList());
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a DiscreteParameterOptionsSection section.
    /// The <see cref="DiscreteParameterOptionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class DiscreteParameterOptionsSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteParameterOptionsSection"/> class. Creates an empty <see cref="DiscreteParameterOptionsSection"/> object with default settings.
        /// </summary>
        public DiscreteParameterOptionsSection() : base(SlcConfigurationsIds.Sections.DiscreteParameterOptions.Id)
        {
            DiscreteValues = new List<Guid>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DiscreteParameterOptionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="DiscreteParameterOptionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public DiscreteParameterOptionsSection(Section section) : base(section, SlcConfigurationsIds.Sections.DiscreteParameterOptions.Id)
        {
            var discreteValues = section.GetListValue<Guid>(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DiscreteValues);
            DiscreteValues = discreteValues != null ? discreteValues.Values : new List<Guid>();
        }

        /// <summary>
        /// Gets or sets the DefaultDiscreteValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? DefaultDiscreteValue
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DefaultDiscreteValue);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DefaultDiscreteValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DefaultDiscreteValue, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the DiscreteValues field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public IList<Guid> DiscreteValues { get; private set; }

        /// <summary>
        /// Creates a deep copy of the current <see cref="DiscreteParameterOptionsSection"/>.
        /// </summary>
        /// <returns>A new <see cref="DiscreteParameterOptionsSection"/> object that is a deep copy of this section.</returns>
        public DiscreteParameterOptionsSection Clone()
        {
            return new DiscreteParameterOptionsSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="DiscreteParameterOptionsSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="DiscreteParameterOptionsSection"/> object that is a copy of this section but with a different id.</returns>
        public DiscreteParameterOptionsSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new DiscreteParameterOptionsSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (DiscreteValues.Count == 0)
                section.RemoveFieldValueById(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DiscreteValues);
            else
                section.AddOrUpdateListValue<Guid>(SlcConfigurationsIds.Sections.DiscreteParameterOptions.DiscreteValues, DiscreteValues.ToList());
            return section;
        }
    }
}
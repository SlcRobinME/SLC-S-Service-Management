//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
    using System;
    using System.ComponentModel;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcRelationshipsIds
    {
        public const string ModuleId = "(slc)relationships";
        public static class Enums
        {
        }

        public static class Sections
        {
            public static class LinkInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("f903f60d-bfdf-4316-b138-22b5a1c9c890"))
                {ModuleId = "(slc)relationships"};
                public static FieldDescriptorID ChildObjectType { get; } = new FieldDescriptorID(new Guid("e359e9c1-82a2-400c-9957-c963e4c040f5"));
                public static FieldDescriptorID ChildObjectID { get; } = new FieldDescriptorID(new Guid("f4d694f6-4e7a-4ef6-a3d8-10ddc4ace5ed"));
                public static FieldDescriptorID ChildObjectName { get; } = new FieldDescriptorID(new Guid("b00c48f4-221c-4ab8-acea-63d5399d9ace"));
                public static FieldDescriptorID ChildURL { get; } = new FieldDescriptorID(new Guid("cfc72fba-0ced-40c3-ba38-41319db01c59"));
                public static FieldDescriptorID ChildOrder { get; } = new FieldDescriptorID(new Guid("58fdbd84-8a6a-4ea2-97d0-d78fd01ad34f"));
                public static FieldDescriptorID ParentObjectType { get; } = new FieldDescriptorID(new Guid("51a442a4-e77d-417e-80e3-4e343008e540"));
                public static FieldDescriptorID ParentObjectID { get; } = new FieldDescriptorID(new Guid("43429e53-9f24-4a35-955d-8f15ba7781c8"));
                public static FieldDescriptorID ParentObjectName { get; } = new FieldDescriptorID(new Guid("a528ed39-f0e5-452c-a5f8-d97c12b995e3"));
                public static FieldDescriptorID ParentURL { get; } = new FieldDescriptorID(new Guid("acf0f927-9e61-4ffb-b1f5-41a779a69b51"));
                public static FieldDescriptorID ParentOrder { get; } = new FieldDescriptorID(new Guid("80cf017b-07b0-4215-8b1e-ffecaa4f25d9"));
            }

            public static class ObjectTypeInfo
            {
                public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("ac97c003-884e-48d7-9ff3-e84b13a349be"))
                {ModuleId = "(slc)relationships"};
                public static FieldDescriptorID ObjectName { get; } = new FieldDescriptorID(new Guid("fd6b00c0-0f16-4025-8f13-f9b18f9e2fe0"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId ObjectTypes { get; } = new DomDefinitionId(new Guid("7ab57219-6b21-4abb-83a4-f5c22de38f20"))
            {ModuleId = "(slc)relationships"};
            public static DomDefinitionId Links { get; } = new DomDefinitionId(new Guid("fcedb769-e515-414b-8e64-7093104f6d66"))
            {ModuleId = "(slc)relationships"};
        }

        public static class Behaviors
        {
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a ObjectTypesInstance DOM instance.
    /// The <see cref="ObjectTypesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ObjectTypesInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class. Creates an empty <see cref="ObjectTypesInstance"/> instance with default settings.
        /// </summary>
        public ObjectTypesInstance() : base(SlcRelationshipsIds.Definitions.ObjectTypes)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class. Creates an empty <see cref="ObjectTypesInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public ObjectTypesInstance(Guid id) : base(SlcRelationshipsIds.Definitions.ObjectTypes, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ObjectTypesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ObjectTypesInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcRelationshipsIds.Definitions.ObjectTypes))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcRelationshipsIds.Definitions.ObjectTypes)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the ObjectTypeInfo section of the DOM Instance.
        /// </summary>
        public ObjectTypeInfoSection ObjectTypeInfo { get; set; }

        public static explicit operator ObjectTypesInstance(DomInstance instance)
        {
            return new ObjectTypesInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ObjectTypesInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="ObjectTypesInstance"/> object that is a deep copy of this instance.</returns>
        public ObjectTypesInstance Clone()
        {
            return new ObjectTypesInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ObjectTypesInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ObjectTypesInstance"/> object that is a copy of this instance but with a different id.</returns>
        public ObjectTypesInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new ObjectTypesInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(ObjectTypeInfo.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _objectTypeInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcRelationshipsIds.Sections.ObjectTypeInfo.Id));
            if (_objectTypeInfo is null)
            {
                ObjectTypeInfo = new ObjectTypeInfoSection();
            }
            else
            {
                ObjectTypeInfo = new ObjectTypeInfoSection(_objectTypeInfo);
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a LinksInstance DOM instance.
    /// The <see cref="LinksInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class LinksInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinksInstance"/> class. Creates an empty <see cref="LinksInstance"/> instance with default settings.
        /// </summary>
        public LinksInstance() : base(SlcRelationshipsIds.Definitions.Links)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksInstance"/> class. Creates an empty <see cref="LinksInstance"/> instance with default settings and a specific ID.
        /// </summary>
        public LinksInstance(Guid id) : base(SlcRelationshipsIds.Definitions.Links, id)
        {
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinksInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="LinksInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public LinksInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcRelationshipsIds.Definitions.Links))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcRelationshipsIds.Definitions.Links)}'", nameof(domInstance));
            InitializeProperties();
            AfterLoad();
        }

        /// <summary>
        /// Gets or sets the LinkInfo section of the DOM Instance.
        /// </summary>
        public LinkInfoSection LinkInfo { get; set; }

        public static explicit operator LinksInstance(DomInstance instance)
        {
            return new LinksInstance(instance);
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="LinksInstance"/>.
        /// </summary>
        /// <returns>A new <see cref="LinksInstance"/> object that is a deep copy of this instance.</returns>
        public LinksInstance Clone()
        {
            return new LinksInstance((DomInstance)this.ToInstance().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="LinksInstance"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="LinksInstance"/> object that is a copy of this instance but with a different id.</returns>
        public LinksInstance Duplicate()
        {
            var instance = (DomInstance)this.ToInstance().Clone();
            instance.ID = new DomInstanceId(Guid.NewGuid())
            {ModuleId = ModuleId};
            foreach (var section in instance.Sections)
            {
                section.ID = new Skyline.DataMiner.Net.Sections.SectionID(Guid.NewGuid());
            }

            return new LinksInstance(instance);
        }

        /// <inheritdoc />
        protected sealed override DomInstance InternalToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(LinkInfo.ToSection());
            return domInstance;
        }

        /// <inheritdoc />
        public sealed override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected sealed override void InitializeProperties()
        {
            var _linkInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcRelationshipsIds.Sections.LinkInfo.Id));
            if (_linkInfo is null)
            {
                LinkInfo = new LinkInfoSection();
            }
            else
            {
                LinkInfo = new LinkInfoSection(_linkInfo);
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;
    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a LinkInfoSection section.
    /// The <see cref="LinkInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class LinkInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkInfoSection"/> class. Creates an empty <see cref="LinkInfoSection"/> object with default settings.
        /// </summary>
        public LinkInfoSection() : base(SlcRelationshipsIds.Sections.LinkInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinkInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="LinkInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public LinkInfoSection(Section section) : base(section, SlcRelationshipsIds.Sections.LinkInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the ChildObjectType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ChildObjectType
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChildObjectID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ChildObjectID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChildObjectName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ChildObjectName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChildURL field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ChildURL
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildURL);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildURL);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildURL, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ChildOrder field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? ChildOrder
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ParentObjectType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? ParentObjectType
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType);
                if (wrapper != null)
                {
                    return (Guid? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ParentObjectID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ParentObjectID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ParentObjectName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ParentObjectName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ParentURL field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ParentURL
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentURL);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentURL);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentURL, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the ParentOrder field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Int64? ParentOrder
        {
            get
            {
                var wrapper = section.GetValue<Int64>(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder);
                if (wrapper != null)
                {
                    return (Int64? )wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder, (Int64)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="LinkInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="LinkInfoSection"/> object that is a deep copy of this section.</returns>
        public LinkInfoSection Clone()
        {
            return new LinkInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="LinkInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="LinkInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public LinkInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new LinkInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType) == null)
                throw new InvalidOperationException("'ChildObjectType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType) == null)
                throw new InvalidOperationException("'ParentObjectType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a ObjectTypeInfoSection section.
    /// The <see cref="ObjectTypeInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class ObjectTypeInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeInfoSection"/> class. Creates an empty <see cref="ObjectTypeInfoSection"/> object with default settings.
        /// </summary>
        public ObjectTypeInfoSection() : base(SlcRelationshipsIds.Sections.ObjectTypeInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ObjectTypeInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public ObjectTypeInfoSection(Section section) : base(section, SlcRelationshipsIds.Sections.ObjectTypeInfo.Id)
        {
        }

        /// <summary>
        /// Gets or sets the ObjectName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String ObjectName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName, (String)value);
                }
            }
        }

        /// <summary>
        /// Creates a deep copy of the current <see cref="ObjectTypeInfoSection"/>.
        /// </summary>
        /// <returns>A new <see cref="ObjectTypeInfoSection"/> object that is a deep copy of this section.</returns>
        public ObjectTypeInfoSection Clone()
        {
            return new ObjectTypeInfoSection((Section)this.ToSection().Clone());
        }

        /// <summary>
        /// Creates a duplicate of the current <see cref="ObjectTypeInfoSection"/> with a new id.
        /// </summary>
        /// <returns>A new <see cref="ObjectTypeInfoSection"/> object that is a copy of this section but with a different id.</returns>
        public ObjectTypeInfoSection Duplicate()
        {
            var section = (Section)this.ToSection().Clone();
            section.ID = new SectionID(Guid.NewGuid());
            return new ObjectTypeInfoSection(section);
        }

        /// <inheritdoc />
        protected override Section InternalToSection()
        {
            if (section.GetValue<String>(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName) == null)
                throw new InvalidOperationException("'ObjectName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }
}